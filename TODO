=== Grammar without type annotations ===

- [*] if expressions
- [*] Function application
- [*] Lambdas
- [*] Let expressions (context-sensitive)
- [*] case expression (context-sensitive)
- [*] Record values
- [*] Record updating
- [*] Function application from ``lvalue'' expression
    - [*] `(if True then f else g) arg`
    - [*] `(\x -> x + 1) arg`
- [*] Built-in binary and unary operators
    - [*] Arithemetic binary operators
    - [*] Comparison operators
    - [*] Unary binary operators
    - [*] cons
    - [*] append
    - [*] Composition and application
- [*] Record accessors
- [*] Module accessors
- [*] Operator references (e.g., `lessThan = (<)`)
- [*] Pattern matching
    - [*] CaseBranch
    - [*] Function parameters
- [*] Custom types
- [*] Type aliases
- [*] Custom types variant usages
    - [*] Patterns
    - [*] Expressions (it's just function application!)
- [*] Modules
- [*] Imports
- [*] Type annotations
- [ ] Program of top-level functions
